#!/usr/bin/python
#
# sodtube1d.py
#
# Description:
#     1D Sod Tube Test
#
#     This program is implemented by OO style to be
#     a part of ipython notebook demo materials.
#
#     The derivation of the equations for the analytic solution
#     is based on the book,
#     Principles of Computational Fluid Dynamics,
#     written by Pieter Wesseling.
#     Or, someone could refer to the solvcon website
#     http://www.solvcon.net/en/latest/cese.html#sod-s-shock-tube-problem
#
#
# DEBUG: search string 'DEBUG'
# why: somewhere don't understand very much ...

import sys
import scipy.optimize as so
import matplotlib.pyplot as plt

# a number to claim two floating number value are equal.
delta_precision = 0.0000000000001

class PlotManager():
    """
    Manage how to show the data generated by SodTube.
    Roughly speaking, it is a wrapper of matplotlib
    """
    def __init__(self):
        pass

    def plot_mesh(self, mesh):
        pass

    def plot_solution(self):
        pass

    def show_solution_comparison(self):
        plt.show()

    def get_plot_solutions_fig_rho(self,
                           solution_a,
                           solution_b,
                           solution_a_label="series 1",
                           solution_b_label="series 2"):
        return self.get_plot_solutions_fig(solution_a,
                                           solution_b,
                                           1,
                                           solution_a_label,
                                           solution_b_label)

    def get_plot_solutions_fig_v(self,
                           solution_a,
                           solution_b,
                           solution_a_label="series 1",
                           solution_b_label="series 2"):
        return self.get_plot_solutions_fig(solution_a,
                                           solution_b,
                                           2,
                                           solution_a_label,
                                           solution_b_label)

    def get_plot_solutions_fig_p(self,
                           solution_a,
                           solution_b,
                           solution_a_label="series 1",
                           solution_b_label="series 2"):
        return self.get_plot_solutions_fig(solution_a,
                                           solution_b,
                                           3,
                                           solution_a_label,
                                           solution_b_label)

    def get_plot_solutions_fig(self,
                       solution_a,
                       solution_b,
                       item,
                       solution_a_label="series 1",
                       solution_b_label="series 2"):
        ax = self.get_solution_value_list(solution_a, 0)
        ay = self.get_solution_value_list(solution_a, item)
        bx = self.get_solution_value_list(solution_b, 0)
        by = self.get_solution_value_list(solution_b, item)
        fig = plt.figure()
        ax1 = fig.add_subplot(111)
        ax1.set_title(solution_a_label + " v.s. " + solution_b_label)
        ax1.scatter(ax, ay, s=10, c='b', marker="s", label=solution_a_label)
        ax1.scatter(bx, by, s=10, c='r', marker="o", label=solution_b_label)
        plt.legend(loc='upper left')
        return fig

    def get_solution_value_list(self, solution, item):
        solution_item_list = []
        for i in solution:
            solution_item_list.append(i[item])
        return solution_item_list

