#!/usr/bin/env python2.6
# -*- coding: UTF-8 -*-
#
# Copyright (C) 2010-2011 Yung-Yu Chen <yyc@solvcon.net>.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

"""
Experimental.  Not guaranteed to work.

The periodic BC can be used as a through BC.

The arrangement through can be run by simply executing ./go run.
"""

from solvcon.hook import BlockHook
from solvcon.anchor import Anchor
from solvcon.kerpak.cese import ProbeHook
from solvcon.kerpak import gasdyn

class MovingShock(object):
    """
    Subscript 1 denotes quantities before shock (have not touched by shock),
    subscript 2 denotes quantities after shock (passed by shock).
    """
    def __init__(self, ga, Ms):
        self.ga = ga
        self.Ms = Ms

    def _calc_ratio_rho(self, p1, p2):
        nume = 1 + (self.ga+1)/(self.ga-1) * (p2/p1)
        deno = (self.ga+1)/(self.ga-1) + (p2/p1)
        return nume/deno
    def _calc_ratio_p(self):
        nume = 2*self.ga*self.Ms**2 - (self.ga-1)
        deno = self.ga + 1
        return nume/deno
    def _calc_ratio_T(self, p1, p2):
        nume = (self.ga+1)/(self.ga-1) + p2/p1
        nume *= p2
        deno = 1 + (self.ga+1)/(self.ga-1) * p2/p1
        deno *= p1
        return nume/deno

    def calc_rho1(self, rho2, p1, p2):
        return rho2 / self._calc_ratio_rho(p1, p2)
    def calc_rho2(self, rho1, p1, p2):
        return rho1 * self._calc_ratio_rho(p1, p2)
    def calc_p1(self, p2):
        return p2 / self._calc_ratio_p()
    def calc_p2(self, p1):
        return p1 * self._calc_ratio_p()
    def calc_T1(self, T2, p1, p2):
        return T2 / self._calc_ratio_T(p1, p2)
    def calc_T2(self, T1, p1, p2):
        return T1 * self._calc_ratio_T(p1, p2)

    def calc_M2p(self):
        from math import sqrt
        nume = 2 * (self.Ms**2-1)
        deno = 2*self.ga*self.Ms**2 - (self.ga-1)
        deno *= 2 + (self.ga-1)*self.Ms**2
        deno = sqrt(deno)
        return nume / deno

class ExactMovingShockHook(BlockHook):
    def __init__(self, cse, **kw):
        self.ga = kw.pop('gamma')
        self.Ms = kw.pop('Ms')
        self.rho = kw.pop('rho')
        self.p = kw.pop('p')
        super(ExactMovingShockHook, self).__init__(cse, **kw)
    def _calculate(self):
        from math import pi
        ms = MovingShock(ga=self.ga, Ms=self.Ms)
        p1 = ms.calc_p2(self.p)
        rho1 = ms.calc_rho1(self.rho, p1, self.p)
        self.info('Moving shock relation (exact):\n')
        self.info('  rho1 = %.10f\n' % rho1)
        self.info('  p1   = %.10f\n' % p1)
    def preloop(self):
        self._calculate()
    postloop = preloop

def mesher(cse):
    """
    Generate a cube according to journaling file cube.tmpl.
    """
    import os
    from solvcon.helper import Cubit
    try:
        itv = float(cse.io.basefn.split('_')[-1])/1000
    except ValueError:
        itv = 0.1
    cmds = open(os.path.join(os.path.dirname(__file__),
        'through.tmpl')).read()# % itv
    cmds = [cmd.strip() for cmd in cmds.strip().split('\n')]
    gn = Cubit(cmds, 2)()
    return gn.toblock(bcname_mapper=cse.condition.bcmap)

class GasdynOpenWall(gasdyn.GasdynWall):
    def __init__(self, **kw):
        from numpy import empty
        super(GasdynOpenWall, self).__init__(**kw)
        self.rblkn = getattr(self, 'rblkn', -1)
        self.rblkinfo = empty(6, dtype='int32')
        self.rclp = empty((0,3), dtype='int32')

    def cloneTo(self, another):
        super(GasdynOpenwall, self).cloneTo(another)
        another.rblkn = self.rblkn
        another.rblkinfo = self.rblkinfo.copy()
        another.rclp = self.rclp.copy()

    def sort(self, ref):
        if ref is None:
            return
        from numpy import sqrt
        dist = sqrt(((self.svr.fccnd[self.facn[:,0],:] - ref)**2).sum(axis=1))
        slct = dist.argsort()
        self.facn = self.facn[slct,:]

    def couple(self, rbc):
        """
        Calculate self.rclp[:,:] form the information about related BC object
        provided by rbc parameter.

        @param rbc: Related BC object.
        @type rbc: solvcon.boundcond.periodic
        @return: nothing.
        """
        from numpy import empty
        svr = self.svr
        facn = self.facn
        facn[:,2] = rbc.facn[:,0]
        # fill informations from related block.
        self.rblkinfo[:] = (svr.nnode, svr.ngstnode,
            svr.nface, svr.ngstface, svr.ncell, svr.ngstcell)
        # calculate indices of related cells.
        self.rclp = empty((len(self),3), dtype='int32')
        self.rclp[:,0] = svr.fccls[svr.ngstface+facn[:,0],1]
        self.rclp[:,1] = svr.fccls[svr.ngstface+facn[:,2],0]
        self.rclp[:,2] = svr.fccls[svr.ngstface+facn[:,0],0]
        # assertion.
        assert (self.rclp[:,0]<0).all()
        assert (self.rclp[:,1]>=0).all()
        assert (self.rclp[:,2]>=0).all()
        # copy metrics.
        slctm = self.rclp[:,0] + svr.ngstcell
        slctr = self.rclp[:,1] + svr.ngstcell
        svr.cltpn[slctm] = svr.cltpn[slctr]
        svr.clgrp[slctm] = svr.clgrp[slctr]
        svr.clvol[slctm] = svr.clvol[slctr]
        # move coordinates.
        shf = svr.clcnd[slctr,:] - svr.fccnd[svr.ngstface+facn[:,2],:]
        svr.clcnd[slctm,:] = svr.fccnd[svr.ngstface+facn[:,0],:] + shf

    @staticmethod
    def couple_all(svr, bcmap):
        """
        Couple all periodic boundary conditions.

        @param svr: the solver having periodic BCs to be coupled.
        @type svr: solvcon.block.Block
        @param bcmap: mapper for periodic BCs.
        @type bcmap: dict
        @return: nothing
        """
        from solvcon.boundcond import periodic
        nmidx = dict([(svr.bclist[idx].name, idx) for idx in
            range(len(svr.bclist))])
        npidx = list()
        for key in bcmap:
            bct, vdict = bcmap[key]
            if not issubclass(bct, GasdynOpenWall):
                try:
                    if key in nmidx:
                        npidx.append(nmidx[key])
                except Exception as e:
                    args = list(e.args)
                    args.append(str(nmidx))
                    e.args = tuple(args)
                    raise
                continue
            val = vdict['link']
            ibc0 = nmidx[key]
            ibc1 = nmidx[val]
            pbc0 = svr.bclist[ibc0] = bct(bc=svr.bclist[ibc0])
            pbc1 = svr.bclist[ibc1] = bct(bc=svr.bclist[ibc1])
            ref = vdict.get('ref', None)
            pbc0.sort(ref)
            pbc1.sort(ref)
            pbc0.couple(pbc1)
            pbc1.couple(pbc0)

    def init(self, **kw):
        svr = self.svr
        ngstcell = svr.ngstcell
        ngstface = svr.ngstface
        facn = self.facn
        slctm = self.rclp[:,0] + ngstcell
        slctr = self.rclp[:,1] + ngstcell
        # move coordinates.
        shf = svr.cecnd[slctr,0,:] - svr.fccnd[facn[:,2]+ngstface,:]
        svr.cecnd[slctm,0,:] = svr.fccnd[facn[:,0]+ngstface,:] + shf
    def soln(self):
        svr = self.svr
        slctm = self.rclp[:,0] + svr.ngstcell
        slctr = self.rclp[:,1] + svr.ngstcell
        if svr.scu:
            svr.cumgr.arr_from_gpu('soln')
        svr.soln[slctm,:] = svr.soln[slctr,:]
        if svr.scu:
            svr.cumgr.arr_to_gpu('soln')
    def dsoln(self):
        svr = self.svr
        slctm = self.rclp[:,0] + svr.ngstcell
        slctr = self.rclp[:,1] + svr.ngstcell
        if svr.scu:
            svr.cumgr.arr_from_gpu('dsoln')
        svr.dsoln[slctm,:,:] = svr.dsoln[slctr,:,:]
        if svr.scu:
            svr.cumgr.arr_to_gpu('dsoln')

def match_open_wall(svr):
    """
    Match periodic boundary condition.
    """
    from numpy import array
    bct = GasdynOpenWall
    bcmap = dict()
    bcmap.update({
        'iupperu': (
            bct, {'link': 'iupperd', 'ref': array([0,0], dtype='float64')}
        )})
    bcmap.update({
        'iloweru': (
            bct, {'link': 'ilowerd', 'ref': array([0,0], dtype='float64')}
        )})
    bcmap.update({
        'ileftu': (
            bct, {'link': 'ileftd', 'ref': array([0,0], dtype='float64')}
        )})
    bcmap.update({
        'irightu': (
            bct, {'link': 'irightd', 'ref': array([0,0], dtype='float64')}
        )})
    bct.couple_all(svr, bcmap)

class ReptureAnchor(Anchor):
    def __init__(self, svr, **kw):
        self.estep = float(kw.pop('estep'))
        super(ReptureAnchor, self).__init__(svr, **kw)
    def prefull(self):
        svr = self.svr
        if svr.step_global == self.estep:
            match_open_wall(svr)
            for bc in svr.bclist:
                if isinstance(bc, GasdynOpenWall):
                    bc.init()
            svr._tcall(svr._clib_cuse_c.prepare_ce, 0, svr.ncell)
            if svr.scu: svr.cumgr.arr_to_gpu()

def through_base(casename=None, meshname=None,
    gamma=None, density=None, pressure=None, Ms=None,
    psteps=None, ssteps=None, **kw
):
    """
    Fundamental configuration of the simulation and return the case object.

    @return: the created Case object.
    @rtype: solvcon.case.BlockCase
    """
    import os
    from numpy import pi, array, sin, cos, sqrt
    from solvcon.conf import env
    from solvcon.boundcond import bctregy
    from solvcon.solver import ALMOST_ZERO
    from solvcon import hook, anchor
    from solvcon.kerpak import cuse
    # set flow properties (fp).
    ms = MovingShock(ga=gamma, Ms=Ms)
    fpi = {
        'gamma': gamma, 'rho': density, 'v2': 0.0, 'v3': 0.0, 'p': pressure,
    }
    fpi['v1'] = 0.0
    fpb = fpi.copy()
    fpb['p'] = ms.calc_p2(pressure)
    fpb['rho'] = ms.calc_rho2(density, pressure, fpb['p'])
    fpb['v1'] = Ms*sqrt(gamma*fpi['p']/fpi['rho'])*(1-density/fpb['rho'])
    # set up BCs.
    bcmap = {
        'upper': (bctregy.GasdynWall, {},),
        'left': (bctregy.GasdynInlet, fpb,),
        'right': (bctregy.CuseNonrefl, {},),
        'lower': (bctregy.GasdynWall, {},),
        'iupperu': (bctregy.GasdynWall, {},),
        'iupperd': (bctregy.GasdynWall, {},),
        'ileftu': (bctregy.GasdynWall, {},),
        'ileftd': (bctregy.GasdynWall, {},),
        'irightu': (bctregy.GasdynWall, {},),
        'irightd': (bctregy.GasdynWall, {},),
        'iloweru': (bctregy.GasdynWall, {},),
        'ilowerd': (bctregy.GasdynWall, {},),
    }
    # set up case.
    basedir = os.path.abspath(os.path.join(os.getcwd(), 'result'))
    cse = gasdyn.GasdynCase(basedir=basedir, rootdir=env.projdir,
        basefn=casename, meshfn=None, mesher=mesher, bcmap=bcmap, **kw)
    # anchors for solvers.
    for key in 'Runtime', 'March', 'Tpool':
        cse.runhooks.append(getattr(anchor, key+'StatAnchor'))
    # informative.
    cse.runhooks.append(hook.ProgressHook,
        psteps=psteps, linewidth=ssteps/psteps,
    )
    cse.runhooks.append(cuse.CflHook, fullstop=False, psteps=ssteps,
        cflmax=10.0, linewidth=ssteps/psteps,
    )
    cse.runhooks.append(cuse.ConvergeHook, psteps=ssteps)
    cse.runhooks.append(hook.SplitMarker)
    cse.runhooks.append(hook.GroupMarker)
    cse.runhooks.append(hook.BlockInfoHook, psteps=ssteps, show_bclist=True)
    # initializer.
    cse.runhooks.append(anchor.FillAnchor, keys=('soln',), value=ALMOST_ZERO)
    cse.runhooks.append(anchor.FillAnchor, keys=('dsoln',), value=0)
    cse.runhooks.append(gasdyn.UniformIAnchor, **fpi)
    # repture.
    cse.runhooks.append(ReptureAnchor, estep=100)
    # post processing.
    ## collect variables.
    varlist = list()
    for var in ['soln', 'dsoln']:
        varlist.append((var, {'inder': False, 'consider_ghost': True}))
    for var in ['rho', 'p', 'T', 'ke', 'M', 'sch', 'v']:
        varlist.append((var, {'inder': True, 'consider_ghost': True}))
    cse.runhooks.append(hook.CollectHook, psteps=ssteps, varlist=varlist)
    ## execution order is reversed for postloop.
    cse.runhooks.append(ExactMovingShockHook, Ms=Ms, **fpb)
    cse.runhooks.append(gasdyn.GasdynOAnchor, rsteps=ssteps)
    ## output.
    cse.runhooks.append(hook.MarchSave,
        psteps=ssteps, binary=True, cache_grid=True)
    return cse

@gasdyn.GasdynCase.register_arrangement
def through(casename, **kw):
    """
    The true arrangement which specifies necessary parameters for execution.
    """
    from math import pi
    return through_base(casename,
        gamma=1.4, density=1.0, pressure=1.0, Ms=1.5, time_increment=7.e-3,
        #steps_run=1, ssteps=1, psteps=1, **kw)
        #steps_run=50, ssteps=10, psteps=1, **kw)
        steps_run=500, ssteps=10, psteps=10, **kw)

if __name__ == '__main__':
    import solvcon
    solvcon.go()
