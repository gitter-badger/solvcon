/*
 * Copyright (C) Po-Hsien Lin <lin.880@buckeyemail.osu.edu>.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - Neither the name of the SOLVCON nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

void
#if NDIM == 3
sc_bulk_calc_cfl_3d
#else
sc_bulk_calc_cfl_2d
#endif
(sc_mesh_t *msd, sc_bulk_algorithm_t *alg) {
    int clnfc;
    // pointers.
    int *pclfcs;
    double *pamsca, *pcfl, *pocfl, *psoln, *picecnd, *pcecnd;
    // scalars.
    double hdt, dist, wspd, pr, ke;
    double bulk, p0, rho0, eta;
    // arrays.
    double vec[NDIM];
    // iterators.
    int icl, ifl;
    hdt = alg->time_increment / 2.0;
    #pragma omp parallel for private(clnfc, \
    pclfcs, pamsca, pcfl, pocfl, psoln, picecnd, pcecnd, \
    dist, wspd, pr, ke, vec, icl, ifl, bulk, p0, rho0, eta) \
    firstprivate(hdt)
    for (icl=0; icl<msd->ncell; icl++) {
        pamsca = alg->amsca + icl*(alg->nsca);
        pcfl = alg->cfl + icl;
        pocfl = alg->ocfl + icl;
        psoln = alg->soln + icl*NEQ;
        picecnd = alg->cecnd + icl*(CLMFC+1)*NDIM;
        pclfcs = msd->clfcs + icl*(CLMFC+1);
        // estimate distance.
        dist = 1.e200;
        pcecnd = picecnd;
        clnfc = pclfcs[0];
        for (ifl=1; ifl<=clnfc; ifl++) {
            pcecnd += NDIM;
            // distance.
            vec[0] = picecnd[0] - pcecnd[0];
            vec[1] = picecnd[1] - pcecnd[1];
#if NDIM == 3
            vec[2] = picecnd[2] - pcecnd[2];
#endif
            wspd = sqrt(vec[0]*vec[0] + vec[1]*vec[1]
#if NDIM == 3
                      + vec[2]*vec[2]
#endif
            );
            // minimal value.
            dist = fmin(wspd, dist);
        };
        // wave speed.
        bulk = pamsca[0];
        p0 = pamsca[1];
        rho0 = pamsca[2];
        eta = pamsca[3];
        wspd = psoln[1]*psoln[1] + psoln[2]*psoln[2]
#if NDIM == 3
             + psoln[3]*psoln[3]
#endif
        ;
        ke = wspd/(2.0*psoln[0]);
        // density base
        //wspd = sqrt(bulk/psoln[0]) + sqrt(wspd)/psoln[0];
        // pressure base
        wspd = sqrt(bulk/(eta*psoln[0])) + sqrt(wspd)/psoln[0];
        // CFL.
        pocfl[0] = hdt*wspd/dist;
        // if pressure is null, make CFL to be 1.
        //pcfl[0] = (pocfl[0]-1.0) * pr/(pr+SOLVCON_TINY) + 1.0;
        pcfl[0] = pocfl[0];
        // correct negative pressure.
        //psoln[1+NDIM] = pr/ga1 + ke + SOLVCON_TINY;
        // advance.
    };
};

// vim: set ft=c ts=4 et:
