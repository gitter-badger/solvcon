/*
 * Copyright (C) 2013 Po-Hsien Lin <lin.880@buckeyemail.osu.edu>.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - Neither the name of the SOLVCON nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

void
#if NDIM == 3
sc_bulk_process_dB_3d
#else
sc_bulk_process_dB_2d
#endif
(sc_mesh_t *msd, sc_bulk_algorithm_t *alg, double *predif, double *dB) {
    // pointers.
    double *pclcnd, *pcecnd;
    double *psoln, *pdsoln;
    double (*pvd)[NDIM];    // shorthand for derivative.
    double *ppredif, *pdB;
    // scalars.
    double bulk, p0, rho0, pref, pini, p, rho;
    double xmax, xmin, ymax, ymin;
    double time;
    double *pt;
    FILE *pre;
    // arrays.
    double sft[NDIM];
    // iterators.
    int icl;
    p0 = alg->p0;
    rho0 = alg->rho0;
    #pragma omp parallel for private(pclcnd, pcecnd, psoln, pdsoln,\
    ppredif, pdB, bulk, pref, pini, p, sft, icl, rho, pt)
    for (icl=-msd->ngstcell; icl<msd->ncell; icl++) {
        pclcnd = msd->clcnd + icl*NDIM;
        pcecnd = alg->cecnd + icl*(CLMFC+1)*NDIM;
        psoln = alg->soln + icl*NEQ;
        ppredif = predif + icl+msd->ngstcell;
        pdB = dB + icl+msd->ngstcell;
        // obtain flow parameters.
        bulk = alg->bulk[icl];
        // FIXME: these are invalid.
        /*pref = pamsca[4];
        pini = pamsca[5];
        xmax = pamsca[8];
        xmin = pamsca[9];
        ymax = pamsca[10];
        ymin = pamsca[11];*/
        pdsoln = alg->dsoln + icl*NEQ*NDIM;
        pvd = (double (*)[NDIM])pdsoln;
        pt = alg->cecnd + icl*(CLMFC+1)*NDIM;
        // shift from solution point to cell center.
        sft[0] = pclcnd[0] - pcecnd[0];
        sft[1] = pclcnd[1] - pcecnd[1];
#if NDIM == 3
        sft[2] = pclcnd[2] - pcecnd[2];
#endif
        // rho is density for density base, and is p' for pressure base
        rho = psoln[0] + pdsoln[0]*sft[0] + pdsoln[1]*sft[1];
#if NDIM == 3
        rho += pdsoln[2]*sft[2];
#endif
        // density base
        p = p0 + bulk*log(rho/rho0);
        ppredif[0] = p - pini;
        pdB[0] = 10 * log10(pow(ppredif[0]/pref,2));
        
        if((pt[0]>0 && pt[0]<0.01) && (pt[1]>2.048 && pt[1]<2.058)) {
            time = alg->time;
            pre = fopen("pressure_re89000.txt","a");
            fprintf(pre,"%.10lf %.10lf\n", ppredif[0], time);
            fclose(pre);
        }
    };
};

// vim: set ft=c ts=4 et:
