/*
 * Copyright (C) 2010 Yung-Yu Chen <yyc@solvcon.net>.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - Neither the name of the SOLVCON nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

void
#if NDIM == 3
sc_bulk_bound_nswall_soln_3d
#else
sc_bulk_bound_nswall_soln_2d
#endif
(sc_mesh_t *msd, sc_bulk_algorithm_t *alg, int nbnd, int *facn) {
    // pointers.
    int *pfacn, *pfccls, *pfcnds;
    double *pfcnml, *pndcrd, *pfccnd;
    double *pisoln, *pjsoln;
    // scalars.
    double len;
    // arrays.
    double mat[NDIM][NDIM], mvt[NDIM][NDIM];
    double mom[NDIM];
    // iterators.
    int ibnd, ifc, icl, jcl;
    #pragma omp parallel for default(shared) private(ibnd, \
    pfacn, pfccls, pfcnds, pfcnml, pndcrd, pfccnd, \
    pisoln, pjsoln, len, mat, mvt, mom, ifc, icl, jcl)
    for (ibnd=0; ibnd<nbnd; ibnd++) {
        pfacn = facn + ibnd*BFREL;
        ifc = pfacn[0];
        pfccls = msd->fccls + ifc*FCREL;
        icl = pfccls[0];
        jcl = pfccls[1];
        pisoln = alg->soln + icl*NEQ;
        pjsoln = alg->soln + jcl*NEQ;
        pjsoln[0] = pisoln[0];
        pjsoln[1] = -pisoln[1];
        pjsoln[2] = -pisoln[2];
    };
};

void
#if NDIM == 3
sc_bulk_bound_nswall_dsoln_3d
#else
sc_bulk_bound_nswall_dsoln_2d
#endif
(sc_mesh_t *msd, sc_bulk_algorithm_t *alg, int nbnd, int *facn) {
    int *pfacn, *pfccls, *pfcnds;
    double *pidsoln, *pjdsoln, *pdsoln;
    double *pndcrd, *pfccnd, *pfcnml;
    // scalars.
    double len, x, y, deg, ux, uy, vx, vy, pi, q2s, q2t, q3s, q3t, nx, ny;
    // arrays.
    double vec[NEQ][NDIM];
    double mat[NDIM][NDIM], matinv[NDIM][NDIM];
    // iterators.
    int ibnd, ifc, icl, jcl, ieq;
    pi = 3.14159265358979323846;
    #pragma omp parallel for default(shared) private(ibnd, \
    pfacn, pfccls, pfcnds, pidsoln, pjdsoln, pdsoln, pndcrd, pfccnd, pfcnml, \
    len, x, y, deg, ux, uy, vx, vy, pi, q2s, q2t, q3s, q3t, nx, ny, vec, mat, \
    matinv, ifc, icl, jcl, ieq)
    for (ibnd=0; ibnd<nbnd; ibnd++) {
        pfacn = facn + ibnd*BFREL;
        ifc = pfacn[0];
        pfccls = msd->fccls + ifc*FCREL;
        icl = pfccls[0];
        jcl = pfccls[1];
        pfcnds = msd->fcnds + ifc*(FCMND+1);
        pidsoln = alg->dsoln + icl*NEQ*NDIM;
        pjdsoln = alg->dsoln + jcl*NEQ*NDIM;
        pfccnd = msd->fccnd + ifc*NDIM;
        pfcnml = msd->fcnml + ifc*NDIM;
        if(pfcnml[0] >= 0)
        {    x = pfcnml[0];
             y = pfcnml[1];
             nx = x; ny = y;
             if(x == 0 && y>0) deg = 0.0;
             else if (x == 0 && y<0) deg = pi;
             else if(pfcnml[1] > 0) 
             {    deg = acos(y/sqrt(x*x+y*y));
                  deg = -deg;}
             else
             {    deg = acos(x/sqrt(x*x+y*y));
                  deg = 3*pi/2 - deg;}
        }
        else
        {    x = pfcnml[0];
             y = pfcnml[1];
             nx = x; ny = y;
             if(y==0 && x>0) deg = -pi/2;
             else if(y==0 && x<0) deg = pi/2;
             else if(pfcnml[1] > 0)
             {    deg = acos(y/sqrt(x*x+y*y));}
             else 
             {    deg = acos(-y/sqrt(x*x+y*y));
                  deg = 2*pi - deg;} 
        }
        //mat = T matrix in 99 paper
        mat[0][0] = cos(deg);
        mat[0][1] = -sin(deg);
        mat[1][0] = sin(deg);
        mat[1][1] = cos(deg);
        //transfer to sigma axis
        
        pdsoln = pjdsoln;
        //eq1  density(continuity equation)  
        pdsoln[0] = pidsoln[0] - 2*nx*(nx*pidsoln[0]+ny*pidsoln[1]);
        pdsoln[1] = pidsoln[1] - 2*ny*(nx*pidsoln[0]+ny*pidsoln[1]);
        pdsoln += NDIM; pidsoln += NDIM;
        ux = pidsoln[0]; uy = pidsoln[1];
        pidsoln += NDIM;
        vx = pidsoln[0]; vy = pidsoln[1];
        //momentum equation eq2~3
        q2s = mat[0][0]*(ux*mat[0][0]+vx*mat[1][0])+mat[1][0]*(uy*mat[0][0]+vy*mat[1][0]);
        q2t = -mat[1][0]*(ux*mat[0][0]+vx*mat[1][0])+mat[0][0]*(uy*mat[0][0]+vy*mat[1][0]);
        q3s = mat[0][0]*(vx*mat[0][0]-ux*mat[1][0])+mat[1][0]*(vy*mat[0][0]-uy*mat[1][0]);
        q3t = -mat[1][0]*(vx*mat[0][0]-ux*mat[1][0])+mat[0][0]*(vy*mat[0][0]-uy*mat[1][0]);
        q2s = -q2s;
        q3s = -q3s;
        pdsoln[0] = mat[0][0]*(q2s*mat[0][0]-q3s*mat[1][0])-mat[1][0]*(q2t*mat[0][0]-q3t*mat[1][0]);
        pdsoln[1] = mat[0][0]*(q2s*mat[0][0]-q3s*mat[1][0])-mat[1][0]*(q2t*mat[0][0]-q3t*mat[1][0]);
        pdsoln += NDIM;
        pdsoln[0] = mat[0][0]*(q3s*mat[0][0]+q2s*mat[1][0])-mat[1][0]*(q3t*mat[0][0]+q2t*mat[1][0]);
        pdsoln[1] = mat[1][0]*(q3s*mat[0][0]+q2s*mat[1][0])+mat[0][0]*(q3t*mat[0][0]+q2t*mat[1][0]);
    };
};

// vim: set ft=c ts=4 et:
