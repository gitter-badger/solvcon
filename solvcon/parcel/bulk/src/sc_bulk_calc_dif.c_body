/*
 * Copyright (C) 2013, Po-Hsien Lin <lin.880@buckeyemail.osu.edu>.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - Neither the name of the SOLVCON nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

void
#if NDIM == 3
sc_bulk_calc_dif_3d
#else
sc_bulk_calc_dif_2d
#endif
(sc_mesh_t *msd, sc_bulk_algorithm_t *alg, int icl, double difs[NEQ][NDIM]) {
    // pointers.
    double *psol, *pdsol;
    // scalars.
    double bulk, p0, rho0, dvisco, vel, rho;
    double u1, u2, u3;
#if NDIM == 3
    double u4;
#endif
    // accelerating variables.
    double dudx, dudy, dvdx, dvdy;
    // initialize values.
    bulk = alg->bulk[icl];
    dvisco = alg->dvisco[icl];
    p0 = alg->p0;
    rho0 = alg->rho0;
    psol = alg->sol + icl*NEQ;
    pdsol = alg->dsol + icl*NEQ*NDIM;
    u1 = psol[0] + _TINY;
    u2 = psol[1];
    u3 = psol[2];
    vel = u2*u2 + u3*u3;
#if NDIM == 3
    u4 = psol[3];
    vel += u4*u4;
#endif
    vel = sqrt(vel/(u1*u1));

    dudx = u2/u1*pdsol[0];
    dudy = u2/u1*pdsol[1];
    dvdx = u3/u1*pdsol[0];
    dvdy = u3/u1*pdsol[1];
    pdsol += NDIM;
    dudx = (pdsol[0]-dudx)/u1;
    dudy = (pdsol[1]-dudy)/u1;
    pdsol += NDIM;
    dvdx = (pdsol[0]-dvdx)/u1;
    dvdy = (pdsol[1]-dvdy)/u1;

    // FIXME: these are only for 2D.
    difs[0][0] = 0;
    difs[0][1] = 0;
    difs[1][0] = dvisco*(2*dudx-2/3*(dudx+dvdy));
    difs[1][1] = dvisco*(dudy+dvdx);
    difs[2][0] = dvisco*(dudy+dvdx);
    difs[2][1] = dvisco*(2*dvdy-2/3*(dudx+dvdy));
};

// vim: set ft=c ts=4 et:
