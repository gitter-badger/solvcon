/*
 * Copyright (C) 2014 Yung-Yu Chen <yyc@solvcon.net>.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - Neither the name of the SOLVCON nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

void
#if NDIM == 3
sc_gas_bound_inlet_soln_3d
#else
sc_gas_bound_inlet_soln_2d
#endif
(sc_mesh_t *msd, sc_bound_t *bcd, sc_gas_algorithm_t *alg) {
    // pointers.
    int *pfacn, *pfccls;
    double *pvalue, *pjsoln;
    // scalars.
    double rho, p, ga, ke;
    double v1, v2, v3;
    // iterators.
    int ibnd, ifc, jcl;
    #pragma omp parallel for default(shared) private(ibnd, pfacn, pfccls, \
    pvalue, pjsoln, rho, p, ga, ke, v1, v2, v3, ifc, jcl)
    for (ibnd=0; ibnd<bcd->nbound; ibnd++) {
        pfacn = bcd->facn + ibnd*BFREL;
        pvalue = bcd->value + ibnd*bcd->nvalue;
        ifc = pfacn[0];
        pfccls = msd->fccls + ifc*FCREL;
        jcl = pfccls[1];
        // extract parameters.
        rho = pvalue[0];
        v1 = pvalue[1];
        v2 = pvalue[2];
#if NDIM == 3
        v3 = pvalue[3];
#endif
        ke = (v1*v1 + v2*v2
#if NDIM == 3
            + v3*v3
#endif
        )*rho/2.0;
        p = pvalue[4];
        ga = pvalue[5];
        // set solutions.
        pjsoln = alg->soln + jcl*NEQ;
        pjsoln[0] = rho;
        pjsoln[1] = v1*rho;
        pjsoln[2] = v2*rho;
#if NDIM == 3
        pjsoln[3] = v3*rho;
#endif
        pjsoln[1+NDIM] = p/(ga-1.0) + ke;
    };
};

void
#if NDIM == 3
sc_gas_bound_inlet_dsoln_3d
#else
sc_gas_bound_inlet_dsoln_2d
#endif
(sc_mesh_t *msd, sc_bound_t *bcd, sc_gas_algorithm_t *alg) {
    // pointers.
    int *pfacn, *pfccls;
    double *pjdsoln;
    // iterators.
    int ibnd, ifc, jcl, it;
    #pragma omp parallel for default(shared) private(ibnd, pfacn, pfccls, \
    pjdsoln, ifc, jcl, it)
    for (ibnd=0; ibnd<bcd->nbound; ibnd++) {
        pfacn = bcd->facn + ibnd*BFREL;
        ifc = pfacn[0];
        pfccls = msd->fccls + ifc*FCREL;
        jcl = pfccls[1];
        pjdsoln = alg->dsoln + jcl*NEQ*NDIM;
        // set to zero.
        for (it=0; it<NEQ*NDIM; it++) {
            pjdsoln[it] = 0.0;
        };
    };
};

// vim: set ft=c ts=4 et:
