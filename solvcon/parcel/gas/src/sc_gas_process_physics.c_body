/*
 * Copyright (C) 2014 Yung-Yu Chen <yyc@solvcon.net>.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - Neither the name of the SOLVCON nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

void
#if NDIM == 3
sc_gas_process_physics_3d
#else
sc_gas_process_physics_2d
#endif
(sc_mesh_t *msd, sc_gas_algorithm_t *alg,
        double gasconst,
        double *vel, double *vor, double *vorm, double *rho, double *pre,
        double *tem, double *ken, double *sos, double *mac) {
    // pointers.
    double *pclcnd, *pcecnd;
    double *pamsca, *psoln, *pdsoln;
    double (*pvd)[NDIM];    // shorthand for derivative.
    double *prho, *pvel, *pvor, *pvorm, *ppre, *ptem, *pken, *psos, *pmac;
    // scalars.
    double ga, ga1;
    // arrays.
    double sft[NDIM];
    // iterators.
    int icl;
    #pragma omp parallel for private(pclcnd, pcecnd, pamsca, psoln, pdsoln, \
    pvd, prho, pvel, pvor, pvorm, ppre, ptem, pken, psos, pmac, \
    ga, ga1, sft, icl)
    for (icl=-msd->ngstcell; icl<msd->ncell; icl++) {
        pclcnd = msd->clcnd + icl*NDIM;
        pcecnd = alg->cecnd + icl*(CLMFC+1)*NDIM;
        pamsca = alg->amsca + icl*NSCA;
        psoln = alg->soln + icl*NEQ;
        pvel = vel + (icl+msd->ngstcell)*NDIM;
        pvor = vor + (icl+msd->ngstcell)*NDIM;
        pvorm = vorm + icl+msd->ngstcell;
        prho = rho + icl+msd->ngstcell;
        ppre = pre + icl+msd->ngstcell;
        ptem = tem + icl+msd->ngstcell;
        pken = ken + icl+msd->ngstcell;
        psos = sos + icl+msd->ngstcell;
        pmac = mac + icl+msd->ngstcell;
        // obtain flow parameters.
        ga = pamsca[0];
        ga1 = ga - 1;
        pdsoln = alg->dsoln + icl*NEQ*NDIM;
        pvd = (double (*)[NDIM])pdsoln;
        // shift from solution point to cell center.
        sft[0] = pclcnd[0] - pcecnd[0];
        sft[1] = pclcnd[1] - pcecnd[1];
#if NDIM == 3
        sft[2] = pclcnd[2] - pcecnd[2];
#endif
        // density.
        prho[0] = psoln[0] + pdsoln[0]*sft[0] + pdsoln[1]*sft[1];
#if NDIM == 3
        prho[0] += pdsoln[2]*sft[2];
#endif
        // velocity.
        pdsoln += NDIM;
        pvel[0] = psoln[1] + pdsoln[0]*sft[0] + pdsoln[1]*sft[1];
#if NDIM == 3
        pvel[0] += pdsoln[2]*sft[2];
#endif
        pvel[0] /= prho[0];
        pken[0] = pvel[0]*pvel[0];
        pdsoln += NDIM;
        pvel[1] = psoln[2] + pdsoln[0]*sft[0] + pdsoln[1]*sft[1];
#if NDIM == 3
        pvel[1] += pdsoln[2]*sft[2];
#endif
        pvel[1] /= prho[0];
        pken[0] += pvel[1]*pvel[1];
#if NDIM == 3
        pdsoln += NDIM;
        pvel[2] = psoln[3] + pdsoln[0]*sft[0] + pdsoln[1]*sft[1];
        pvel[2] += pdsoln[2]*sft[2];
        pvel[2] /= prho[0];
        pken[0] += pvel[2]*pvel[2];
#endif
        // vorticity.
#if NDIM == 3
        pvor[0] = ((pvd[3][1] - pvd[2][2])
                 - (pvel[2]*pvd[0][1] - pvel[1]*pvd[0][2])) / prho[0];
        pvor[1] = ((pvd[1][2] - pvd[3][0])
                 - (pvel[0]*pvd[0][2] - pvel[2]*pvd[0][0])) / prho[0];
        pvor[2] = ((pvd[2][0] - pvd[1][1])
                 - (pvel[1]*pvd[0][0] - pvel[0]*pvd[0][1])) / prho[0];
        pvorm[0] = sqrt(pvor[0]*pvor[0] + pvor[1]*pvor[1] + pvor[2]*pvor[2]);
#else
        pvor[0] = ((pvd[2][0] - pvd[1][1])
                 - (pvel[1]*pvd[0][0] - pvel[0]*pvd[0][1])) / prho[0];
        pvor[1] = pvor[0];
        pvorm[0] = fabs(pvor[0]);
#endif
        // kinetic energy.
        pken[0] *= prho[0]/2;
        // pressure.
        pdsoln += NDIM;
        ppre[0] = psoln[NDIM+1] + pdsoln[0]*sft[0] + pdsoln[1]*sft[1];
#if NDIM == 3
        ppre[0] += pdsoln[2]*sft[2];
#endif
        ppre[0] = (ppre[0] - pken[0]) * ga1;
        ppre[0] = (ppre[0] + fabs(ppre[0])) / 2; // make sure it's positive.
        // temperature.
        ptem[0] = ppre[0]/(prho[0]*gasconst);
        // speed of sound.
        psos[0] = sqrt(ga*ppre[0]/prho[0]);
        // Mach number.
        pmac[0] = sqrt(pken[0]/prho[0]*2);
        pmac[0] *= psos[0]
            / (psos[0]*psos[0] + ALMOST_ZERO); // prevent nan/inf.
    };
};

// vim: set ft=c ts=4 et:
