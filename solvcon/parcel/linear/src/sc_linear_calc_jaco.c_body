/*
 * Copyright (c) 2010, Yung-Yu Chen <yyc@solvcon.net>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - Neither the name of the SOLVCON nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

void 
#if NDIM == 3
sc_linear_calc_jaco_3d
#else
sc_linear_calc_jaco_2d
#endif
(sc_mesh_t *msd, sc_linear_algorithm_t *alg,
 int icl, double fcn[NEQ][NDIM], double jacos[NEQ][NEQ][NDIM]) {
    // pointers.
    double *psol;
    double *pjaco, *pljaco;
    // interators.
    int nt;
    int it, ieq, jeq;
    // fill jacobian.
    pjaco = alg->grpda + msd->clgrp[icl]*alg->gdlen;
    pljaco = (double *)jacos;
    nt = NEQ*NEQ*NDIM;
    for (it=0; it<nt; it++) {
        pljaco[it] = pjaco[it];
    };
    // calculate flux function.
    psol = alg->sol + icl*NEQ;
    for (ieq=0; ieq<NEQ; ieq++) {
        fcn[ieq][0] = 0.0;
        fcn[ieq][1] = 0.0;
#if NDIM == 3
        fcn[ieq][2] = 0.0;
#endif
        for (jeq=0; jeq<NEQ; jeq++) {
            fcn[ieq][0] += jacos[ieq][jeq][0] * psol[jeq];
            fcn[ieq][1] += jacos[ieq][jeq][1] * psol[jeq];
#if NDIM == 3
            fcn[ieq][2] += jacos[ieq][jeq][2] * psol[jeq];
#endif
        };
    };
    return;
};

// vim: set ft=c ts=4 et:
