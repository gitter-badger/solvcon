/*
 * Copyright (C) 2014 Yung-Yu Chen <yyc@solvcon.net>.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - Neither the name of the SOLVCON nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


void
#if NDIM == 3
sc_vewave_ghostgeom_mirror_3d
#else
sc_vewave_ghostgeom_mirror_2d
#endif
(sc_mesh_t *msd, sc_vewave_algorithm_t *alg, int nbnd, int *facn) {
    // pointers.
    int *pfacn, *pfccls;
    double *pfccnd, *pfcnml;
    double *picecnd, *pjcecnd;
    // scalars.
    double len;
	// iterators.
	int ibnd, ifc, icl, jcl;

    #pragma omp parallel for default(shared) private(ibnd, pfacn, pfccls,\
    pfccnd, pfcnml, picecnd, pjcecnd, len, ifc, icl, jcl)

    for (ibnd=0; ibnd<nbnd; ibnd++) {
        pfacn = facn + ibnd*BFREL;
        ifc = pfacn[0];
        pfccls = msd->fccls + ifc*FCREL;
        icl = pfccls[0];
        jcl = pfccls[1];
        picecnd = alg->cecnd + icl*(CLMFC+1)*NDIM;
        pjcecnd = alg->cecnd + jcl*(CLMFC+1)*NDIM;
        // calculate displacement.
        pfccnd = msd->fccnd + ifc * NDIM;
        pfcnml = msd->fcnml + ifc * NDIM;
        len = (pfccnd[0] - picecnd[0]) * pfcnml[0]
            + (pfccnd[1] - picecnd[1]) * pfcnml[1]
#if NDIM == 3
            + (pfccnd[2] - picecnd[2]) * pfcnml[2]
#endif
            ;
        len *= 2.0;
        // set ghost solution point.
        pjcecnd[0] = picecnd[0] + pfcnml[0] * len;
        pjcecnd[1] = picecnd[1] + pfcnml[1] * len;
#if NDIM == 3
        pjcecnd[2] = picecnd[2] + pfcnml[2] * len;
#endif
    };
};

// vim: set ft=c ts=4 et:
