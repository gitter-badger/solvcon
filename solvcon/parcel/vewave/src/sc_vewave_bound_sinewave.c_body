/*
 * Copyright (C) 2010 Yung-Yu Chen <yyc@solvcon.net>.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * - Neither the name of the SOLVCON nor the names of its contributors may be
 *   used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
void
#if NDIM == 3
sc_vewave_bound_longsinex_soln_3d
#else
sc_vewave_bound_longsinex_soln_2d
#endif
(sc_mesh_t *msd, sc_vewave_algorithm_t *alg, int nbnd, int *facn) {
    // pointers.
    int *pfacn, *pfccls;
    double *pjsoln, *pjdsoln;
    double *pamsca;
    // 
    double currentTime, stress, pi, sig0, freq;
    // iterators.
    int ibnd, ifc, icl, jcl, ieq;

    #pragma omp parallel for default(shared) private(ibnd, pfacn, pfccls,\
    pjsoln, pjdsoln, pamsca, currentTime, stress, pi, sig0, freq, ifc, icl,\
    jcl, ieq)

    for (ibnd=0; ibnd<nbnd; ibnd++) {
        pfacn = facn + ibnd*BFREL;
        ifc = pfacn[0];
        pfccls = msd->fccls + ifc*FCREL;
        icl = pfccls[0];
        jcl = pfccls[1];
        pamsca = alg->amsca + icl*alg->nsca;
        // set solutions.
        pjsoln = alg->soln + jcl*NEQ;
        pjdsoln = alg->dsoln + jcl*NEQ*NDIM;
        pi = 3.14159265359;
        currentTime = alg->time;
        sig0 = pamsca[2];
        freq = pamsca[3];
        stress = sig0*sin(2*pi*freq*currentTime);
        for (ieq=0; ieq<NEQ; ieq++) {
            pjsoln[ieq] = 0.0;
            pjdsoln[0] = 0.0;
            pjdsoln[1] = 0.0;
            pjdsoln += NDIM;
        };
        pjsoln[3] = stress;
    };
};

void
#if NDIM == 3
sc_vewave_bound_longsinex_dsoln_3d
#else
sc_vewave_bound_longsinex_dsoln_2d
#endif
(sc_mesh_t *msd, sc_vewave_algorithm_t *alg, int nbnd, int *facn) {
    // pointers.
    int *pfacn, *pfccls;
    double *pjdsoln, *pdsoln;
    // iterators.
    int ibnd, ifc, jcl, ieq;

    #pragma omp parallel for default(shared) private(ibnd, pfacn, pfccls, \
    pjdsoln, pdsoln, ifc, jcl, ieq)

    for (ibnd=0; ibnd<nbnd; ibnd++) {
        pfacn = facn + ibnd*BFREL;
        ifc = pfacn[0];
        pfccls = msd->fccls + ifc*FCREL;
        jcl = pfccls[1];
        pjdsoln = alg->dsoln + jcl*NEQ*NDIM;
        
        pdsoln = pjdsoln;
        for(ieq=0; ieq<NEQ*NDIM; ieq++){
            pdsoln[ieq]=0.0;
        }
        
    };
};

// vim: set ft=c ts=4 et:
